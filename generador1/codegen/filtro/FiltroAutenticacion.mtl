[module FiltroAutenticacion('http://www.eclipse.org/uml2/4.0.0/UML')/]

[template public generate(p : Package)]
[comment @main/]
[file ('/src/main/java/'+ p.qualifiedName.replaceAll('::', '/') +'/filtros/FiltroAutenticacion.java', false, 'UTF-8')]
package [p.qualifiedName.replaceAll('::', '.')/].filtros;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ReadListener;
import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequestWrapper;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.HmacUtils;
import org.apache.commons.io.IOUtils;

/**
 *
 * @author daniel
 */
@WebFilter(filterName = "FiltroAutenticacion", urlPatterns = {"*.html", "/partials/*", "/js/*", "/webresources/*"})
public class FiltroAutenticacion implements Filter {

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        //inicio del filtro
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        try {
            HttpServletRequest req = (HttpServletRequest) request;
            HttpServletResponse resp = (HttpServletResponse) response;

            if (validarPath(req.getRequestURI())) {
                chain.doFilter(request, response);
                return;
            }

            //autenticar servicios
            ServletRequest req2 = autenticarServicios(req, resp);

            String nombreUsuario = (String) req.getSession().getAttribute("nombreUsuario");

            if (nombreUsuario == null) {
                //enviar al login
                resp.sendRedirect("/Contravencional/login.html");
            }

            chain.doFilter(req2, response);

            if (req.getHeader("aplicacion") != null) {
                req.getSession().invalidate();
            }
        } catch (ApplicationException ex) {
            response.setContentType("application/json;charset=UTF-8");
            ((HttpServletResponse) response).setStatus(500);
            try (PrintWriter out = response.getWriter()) {
                out.append("{\"mensaje\":\"" + FiltroExcepciones.procesarTexto(FiltroExcepciones.obtenerUltimaExcepcion(ex).getMessage()) + "\"}");
            }
        } catch (Exception e) {
            Logger.getLogger(FiltroAutenticacion.class.getName()).log(Level.SEVERE, "Error de validacion de informacion de usuario", e);
            ((HttpServletResponse) response).sendRedirect("/cias/errorAutenticacion.html");
        }
    }

    @Override
    public void destroy() {
        //destruccion del filtro
    }

    private boolean validarPath(String requestURI) {
        return requestURI.contains("login") || requestURI.contains("js/lib");
    }

    private ServletRequest autenticarServicios(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        MultiReadHttpServletRequest requestWrapper = new MultiReadHttpServletRequest(req);
        if (req.getHeader("aplicacion") != null
                && req.getHeader("id_usuario") != null
                && req.getHeader("id_organizacion") != null
                && req.getHeader("hmac") != null) {
            String login = req.getHeader("id_usuario");
            String entidad = req.getHeader("id_organizacion");
            if (entidad.length() == 7) {
                entidad = "0" + entidad;
                entidad = "0" + entidad; 
            }
            if ("S".compareTo(AutenticacionServlet.PRUEBAS) == 0) {
                Usuario usuario = new Usuario();
                usuario.setUid("79051161015");
                usuario.setNombres("Usuario de pruebas " + login);
                usuario.setEmail(login + "@growdata.com");
                usuario.setEntidad("1");

                req.getSession().setAttribute("usuario", usuario);
                req.getSession().setAttribute("nombreUsuario", login);
                List<String> roles = new ArrayList<>();
                roles.add("Administrador");
                String menu = menuLogica.obtenerMenusPorRol(roles, Long.valueOf(usuario.getEntidad()));

                req.getSession().setAttribute("menu", menu);
                return req;
            }

            //validar hmac
            try (InputStream is = requestWrapper.getInputStream()) {
                AplicacionDTO aplicacion = aplicacionLogica.obtener(Long.parseLong(req.getHeader("aplicacion")));

                String key = aplicacion.getLlave();
                String hmac = HmacUtils.hmacSha256Hex(Base64.decodeBase64(key), is);
                if (req.getHeader("hmac").compareTo(hmac) == 0) {
                    //la autenticacion es valida
                    Usuario usuario = new Usuario();
                    usuario.setUid(login);
                    usuario.setNombres("");
                    usuario.setEmail("");

                    AutoridadTransitoDTO autoridad = autoridadTransitoLogica.obtenerPorDivipo(entidad);

                    usuario.setEntidad(String.valueOf(autoridad.getId()));

                    req.getSession().setAttribute("usuario", usuario);
                    req.getSession().setAttribute("nombreUsuario", login);
                    List<String> roles = new ArrayList<>();
                    for (AplicacionRolDTO rol : aplicacion.getAplicacionRol()) {
                        roles.add(rol.getNombre());
                    }
                } else {
                    //la autenticacion es invalida
                    throw new ApplicationException("La informacion de hmac es invalida");
                }
            }
        }
        return requestWrapper;
    }

    public class MultiReadHttpServletRequest extends HttpServletRequestWrapper {

        private ByteArrayOutputStream cachedBytes;

        public MultiReadHttpServletRequest(HttpServletRequest request) {
            super(request);
        }

        @Override
        public ServletInputStream getInputStream() throws IOException {
            if (cachedBytes == null) {
                cacheInputStream();
            }

            return new CachedServletInputStream();
        }

        @Override
        public BufferedReader getReader() throws IOException {
            return new BufferedReader(new InputStreamReader(getInputStream()));
        }

        private void cacheInputStream() throws IOException {
            /* Cache the inputstream in order to read it multiple times. For
     * convenience, I use apache.commons IOUtils
             */
            cachedBytes = new ByteArrayOutputStream();
            IOUtils.copy(super.getInputStream(), cachedBytes);
        }

        /* An inputstream which reads the cached request body */
        public class CachedServletInputStream extends ServletInputStream {

            private ByteArrayInputStream input;

            public CachedServletInputStream() {
                /* create a new input stream from the cached request body */
                input = new ByteArrayInputStream(cachedBytes.toByteArray());
            }

            @Override
            public int read() throws IOException {
                return input.read();
            }

            @Override
            public boolean isFinished() {
                return false;
            }

            @Override
            public boolean isReady() {
                return true;
            }

            @Override
            public void setReadListener(ReadListener readListener) {

            }
        }
    }
}
[/file]
[/template]